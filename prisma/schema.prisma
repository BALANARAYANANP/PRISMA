generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model books {
  id           Int      @id @default(autoincrement())
  name         String
  Book_code    Int
  content_type String   @db.Text
  createdAt    DateTime @default(now())
  userId       Int
  student      student  @relation(fields: [userId], references: [user_id], map: "Books_userId_fkey")

  @@index([name], map: "Books_name_idx")
  @@index([userId], map: "Books_userId_fkey")
}

model many {
  id      Int     @id @default(autoincrement())
  stud_id Int
  sub_id  Int
  student student @relation(fields: [stud_id], references: [user_id], map: "Many_stud_id_fkey")
  subject subject @relation(fields: [sub_id], references: [id], map: "Many_sub_id_fkey")

  @@index([stud_id], map: "Many_stud_id_fkey")
  @@index([sub_id], map: "Many_sub_id_fkey")
}

model profile {
  id      Int     @id @default(autoincrement())
  bio     String
  userId  Int     @unique(map: "Profile_userId_key")
  student student @relation(fields: [userId], references: [user_id], map: "Profile_userId_fkey")
}

model student {
  email   String    @unique(map: "Student_email_key")
  name    String
  age     Int
  lname   String
  user_id Int       @id @default(autoincrement())
  isAlive Boolean   @default(true)
  books   books[]
  many    many[]
  profile profile?
  subject subject[]

  @@unique([name, lname], map: "Student_name_lname_key")
}

model subject {
  id        Int      @id @default(autoincrement())
  name      String
  Tutor     String
  createdAt DateTime @default(now())
  stud_id   Int
  many      many[]
  student   student  @relation(fields: [stud_id], references: [user_id], map: "Subject_stud_id_fkey")

  @@index([stud_id], map: "Subject_stud_id_fkey")
}

model test {
  id   Int    @id @default(autoincrement())
  name String
  age  Int
}
